# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

[*]
charset = utf-8
end_of_line = crlf
indent_size = 4
indent_style = tab
insert_final_newline = true
tab_width = 4
trim_trailing_whitespace = true

# C# files
[*.cs]
#### .NET Language Rules ####
#	https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules

# this. and Me. preferences
# 	Set this to prefer that this. must not be used for anything here.
dotnet_style_qualification_for_event = false : warning
dotnet_style_qualification_for_field = false : warning
dotnet_style_qualification_for_method = false : warning
dotnet_style_qualification_for_property = false : warning

# Language keywords vs BCL types preferences
# 	Prefer using the language keywords over the type names.
dotnet_style_predefined_type_for_locals_parameters_members = true : warning
dotnet_style_predefined_type_for_member_access = true : warning

# Modifier preferences
#	Prefer accessibility modifiers to be declared except for public interface members.
dotnet_style_require_accessibility_modifiers = for_non_interface_members : warning
#	Order that modifiers should appear in a line.
csharp_preferred_modifier_order = public, internal, protected, private, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async : suggestion
#	Prefer adding a ReadOnly modifier if only assigned inline or inside a constructor
dotnet_style_readonly_field = true : warning

# Parentheses preferences
#	Parenthesis around everything for clarity except for other operators (references, class properties, etc.)
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity : warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity : warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity : warning
dotnet_style_parentheses_in_other_operators = always_for_clarity : warning

# Expression-level preferences
dotnet_style_object_initializer = true : warning
dotnet_style_collection_initializer = true : warning
dotnet_style_explicit_tuple_names = true : warning
dotnet_style_prefer_inferred_tuple_names = true : warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true : warning
dotnet_style_prefer_auto_properties = true : warning
dotnet_style_prefer_conditional_expression_over_assignment = false : warning
dotnet_style_prefer_conditional_expression_over_return = false : warning
dotnet_style_prefer_compound_assignment = true : warning
dotnet_style_prefer_simplified_interpolation = true : warning
dotnet_style_prefer_simplified_boolean_expressions = true : warning
dotnet_style_coalesce_expression = true : warning
dotnet_style_null_propagation = true : warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true : warning
#	When line with operators are wrapped to multiple lines, prefer operator at end of first line.
dotnet_style_operator_placement_when_wrapping = end_of_line : warning

file_header_template = This file is or was originally a part of the Impressions Resolution Customiser project, which can be found here:\nhttps://github.com/XJDHDR/impressions-resolution-customiser\n\nThe license for it may be found here:\nhttps://github.com/XJDHDR/impressions-resolution-customiser/blob/main/LICENSE\n\n


#### C# Language Rules ####
#	https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules

# var preferences
csharp_style_var_for_built_in_types = false : warning
csharp_style_var_when_type_is_apparent = false : warning
csharp_style_var_elsewhere = false : warning

# Expression-bodied members
csharp_style_expression_bodied_methods = when_on_single_line : warning
csharp_style_expression_bodied_constructors = when_on_single_line : warning
csharp_style_expression_bodied_operators = when_on_single_line : warning
csharp_style_expression_bodied_properties = when_on_single_line : warning
csharp_style_expression_bodied_indexers = when_on_single_line : warning
csharp_style_expression_bodied_accessors = when_on_single_line : warning
csharp_style_expression_bodied_lambdas = when_on_single_line : warning
csharp_style_expression_bodied_local_functions = when_on_single_line : warning

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true : warning
csharp_style_pattern_matching_over_as_with_null_check = true : warning
csharp_style_prefer_switch_expression = false : warning
csharp_style_prefer_pattern_matching = true : warning
csharp_style_prefer_not_pattern = true : warning

# Expression-level preferences
csharp_style_inlined_variable_declaration = true : warning
csharp_prefer_simple_default_expression = true : warning
csharp_style_pattern_local_over_anonymous_function = true : warning
csharp_style_deconstructed_variable_declaration = false : warning
csharp_style_prefer_index_operator = false : warning
csharp_style_prefer_range_operator = false : warning
csharp_style_implicit_object_creation_when_type_is_apparent = true : warning

# Null-checking preferences
csharp_style_throw_expression = true : warning
csharp_style_conditional_delegate_call = true : warning

# Code-block preferences
csharp_prefer_braces = when_multiline : warning
csharp_prefer_simple_using_statement = false : warning

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace : warning

# Modifier preferences
csharp_prefer_static_local_function = false : warning
csharp_preferred_modifier_order = public, internal, protected, private, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async : suggestion


#### Unnecessary Code Rules ####
#	https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/unnecessary-code-rules

csharp_style_unused_value_expression_statement_preference = discard_variable : suggestion
csharp_style_unused_value_assignment_preference = discard_variable : suggestion
# Parameter preferences
dotnet_code_quality_unused_parameters = non_public : suggestion
# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none : warning


#### .NET Formatting Rules ####
#	https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules

# Organize usings
dotnet_sort_system_directives_first = true : warning
dotnet_separate_import_directive_groups = true : warning
dotnet_style_namespace_match_folder = true : warning


#### C# Formatting Rules ####
#	https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules

# New line preferences
csharp_new_line_before_open_brace = anonymous_methods, control_blocks, events, indexers, lambdas, local_functions, methods : suggestion
csharp_new_line_before_else = true : warning
csharp_new_line_before_catch = true : warning
csharp_new_line_before_finally = true : warning
csharp_new_line_before_members_in_object_initializers = true : warning
csharp_new_line_before_members_in_anonymous_types = true : warning
csharp_new_line_between_query_expression_clauses = true : warning

# Indentation preferences
csharp_indent_case_contents_when_block = true : warning
csharp_indent_switch_labels = true : warning
csharp_indent_labels = one_less_than_current : suggestion
csharp_indent_block_contents = true : warning
csharp_indent_braces = false : warning
csharp_indent_case_contents = false : warning

# Space preferences
csharp_space_after_cast = true : suggestion
csharp_space_after_keywords_in_control_flow_statements = true : warning
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true : warning
csharp_space_after_colon_in_inheritance_clause = true : warning
csharp_space_around_binary_operators = before_and_after : warning
csharp_space_between_method_declaration_parameter_list_parentheses = false : warning
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false : warning
csharp_space_between_method_call_name_and_opening_parenthesis = false : warning
csharp_space_between_method_call_parameter_list_parentheses = false : warning
csharp_space_between_method_call_empty_parameter_list_parentheses = false : warning
csharp_space_between_method_declaration_name_and_open_parenthesis = false : warning
csharp_space_after_comma = true : warning
csharp_space_before_comma = false : warning
csharp_space_after_dot = false : warning
csharp_space_before_dot = false : warning
csharp_space_after_semicolon_in_for_statement = true : warning
csharp_space_before_semicolon_in_for_statement = false : warning
csharp_space_around_declaration_statements = false : warning
csharp_space_before_open_square_brackets = false : warning
csharp_space_between_empty_square_brackets = false : warning
csharp_space_between_square_brackets = false : warning

# Wrapping preferences
csharp_preserve_single_line_statements = false : warning
csharp_preserve_single_line_blocks = true : warning

# Namespace options
csharp_style_namespace_declarations = block_scoped : warning


#### Naming rules ####
#	https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules

# Const naming rule
dotnet_naming_rule.const_naming_rule.symbols = const_naming_symbol
dotnet_naming_rule.const_naming_rule.style = const_naming_style
dotnet_naming_rule.const_naming_rule.severity = warning

dotnet_naming_symbols.const_naming_symbol.applicable_kinds = *
dotnet_naming_symbols.const_naming_symbol.applicable_accessibilities = *
dotnet_naming_symbols.const_naming_symbol.required_modifiers = const

dotnet_naming_style.const_naming_style.required_prefix =
dotnet_naming_style.const_naming_style.required_suffix =
dotnet_naming_style.const_naming_style.word_separator =
dotnet_naming_style.const_naming_style.capitalization = all_upper


# Parameter rules
dotnet_naming_rule.parameter_naming_rule.symbols = parameter_naming_symbol
dotnet_naming_rule.parameter_naming_rule.style = parameter_naming_style
dotnet_naming_rule.parameter_naming_rule.severity = warning

dotnet_naming_symbols.parameter_naming_symbol.applicable_kinds = parameter
dotnet_naming_symbols.parameter_naming_symbol.applicable_accessibilities = *
dotnet_naming_symbols.parameter_naming_symbol.required_modifiers =

dotnet_naming_style.parameter_naming_style.required_prefix =
dotnet_naming_style.parameter_naming_style.required_suffix =
dotnet_naming_style.parameter_naming_style.word_separator =
dotnet_naming_style.parameter_naming_style.capitalization = pascal_case


# Local rules
dotnet_naming_rule.local_naming_rule.symbols = local_naming_symbol
dotnet_naming_rule.local_naming_rule.style = local_naming_style
dotnet_naming_rule.local_naming_rule.severity = warning

dotnet_naming_rule.local_symbols_naming_rule.symbols = local_symbols_naming_symbol
dotnet_naming_rule.local_symbols_naming_rule.style = local_naming_style
dotnet_naming_rule.local_symbols_naming_rule.severity = warning

dotnet_naming_symbols.local_naming_symbol.applicable_kinds = local, local_function
dotnet_naming_symbols.local_naming_symbol.applicable_accessibilities = *
dotnet_naming_symbols.local_naming_symbol.required_modifiers =

dotnet_naming_symbols.local_symbols_naming_symbol.applicable_kinds = *
dotnet_naming_symbols.local_symbols_naming_symbol.applicable_accessibilities = local
dotnet_naming_symbols.local_symbols_naming_symbol.required_modifiers =

dotnet_naming_style.local_naming_style.required_prefix =
dotnet_naming_style.local_naming_style.required_suffix =
dotnet_naming_style.local_naming_style.word_separator =
dotnet_naming_style.local_naming_style.capitalization = camel_case


# Public methods and variables naming rule
dotnet_naming_rule.public_method_and_variable_naming_rule.symbols = public_method_and_variable_naming_symbol
dotnet_naming_rule.public_method_and_variable_naming_rule.style = public_method_and_variable_naming_style
dotnet_naming_rule.public_method_and_variable_naming_rule.severity = warning

dotnet_naming_symbols.public_method_and_variable_naming_symbol.applicable_kinds = property, method, field, event, delegate, type_parameter
dotnet_naming_symbols.public_method_and_variable_naming_symbol.applicable_accessibilities = public
dotnet_naming_symbols.public_method_and_variable_naming_symbol.required_modifiers =

dotnet_naming_style.public_method_and_variable_naming_style.required_prefix =
dotnet_naming_style.public_method_and_variable_naming_style.required_suffix =
dotnet_naming_style.public_method_and_variable_naming_style.word_separator =
dotnet_naming_style.public_method_and_variable_naming_style.capitalization = pascal_case


# Internal methods and variables naming rule
dotnet_naming_rule.internal_method_and_variable_naming_rule.symbols = internal_method_and_variable_naming_symbol
dotnet_naming_rule.internal_method_and_variable_naming_rule.style = internal_method_and_variable_naming_style
dotnet_naming_rule.internal_method_and_variable_naming_rule.severity = warning

dotnet_naming_symbols.internal_method_and_variable_naming_symbol.applicable_kinds = property, method, field, event, delegate, type_parameter
dotnet_naming_symbols.internal_method_and_variable_naming_symbol.applicable_accessibilities = internal, protected_internal
dotnet_naming_symbols.internal_method_and_variable_naming_symbol.required_modifiers =

dotnet_naming_style.internal_method_and_variable_naming_style.required_prefix = _
dotnet_naming_style.internal_method_and_variable_naming_style.required_suffix =
dotnet_naming_style.internal_method_and_variable_naming_style.word_separator =
dotnet_naming_style.internal_method_and_variable_naming_style.capitalization = pascal_case


# Private methods and variables naming rule
dotnet_naming_rule.private_method_and_variable_naming_rule.symbols = private_method_and_variable_naming_symbol
dotnet_naming_rule.private_method_and_variable_naming_rule.style = private_method_and_variable_naming_style
dotnet_naming_rule.private_method_and_variable_naming_rule.severity = warning

dotnet_naming_symbols.private_method_and_variable_naming_symbol.applicable_kinds = property, method, field, event, delegate, type_parameter
dotnet_naming_symbols.private_method_and_variable_naming_symbol.applicable_accessibilities = private
dotnet_naming_symbols.private_method_and_variable_naming_symbol.required_modifiers =

dotnet_naming_style.private_method_and_variable_naming_style.required_prefix =
dotnet_naming_style.private_method_and_variable_naming_style.required_suffix =
dotnet_naming_style.private_method_and_variable_naming_style.word_separator =
dotnet_naming_style.private_method_and_variable_naming_style.capitalization = camel_case


# Protected methods and variables naming rule
dotnet_naming_rule.protected_method_and_variable_naming_rule.symbols = protected_method_and_variable_naming_symbol
dotnet_naming_rule.protected_method_and_variable_naming_rule.style = protected_method_and_variable_naming_style
dotnet_naming_rule.protected_method_and_variable_naming_rule.severity = warning

dotnet_naming_symbols.protected_method_and_variable_naming_symbol.applicable_kinds = property, method, field, event, delegate, type_parameter
dotnet_naming_symbols.protected_method_and_variable_naming_symbol.applicable_accessibilities = protected, private_protected
dotnet_naming_symbols.protected_method_and_variable_naming_symbol.required_modifiers =

dotnet_naming_style.protected_method_and_variable_naming_style.required_prefix = _
dotnet_naming_style.protected_method_and_variable_naming_style.required_suffix =
dotnet_naming_style.protected_method_and_variable_naming_style.word_separator =
dotnet_naming_style.protected_method_and_variable_naming_style.capitalization = camel_case


# Namespace, Class, Struct, Interface and Enum rules
dotnet_naming_rule.member_and_value_container_naming_rule.symbols = member_and_value_container_naming_symbol
dotnet_naming_rule.member_and_value_container_naming_rule.style = member_and_value_container_naming_style
dotnet_naming_rule.member_and_value_container_naming_rule.severity = warning

dotnet_naming_symbols.member_and_value_container_naming_symbol.applicable_kinds = namespace, class, struct, interface, enum
dotnet_naming_symbols.member_and_value_container_naming_symbol.applicable_accessibilities = *
dotnet_naming_symbols.member_and_value_container_naming_symbol.required_modifiers =

dotnet_naming_style.member_and_value_container_naming_style.required_prefix =
dotnet_naming_style.member_and_value_container_naming_style.required_suffix =
dotnet_naming_style.member_and_value_container_naming_style.word_separator =
dotnet_naming_style.member_and_value_container_naming_style.capitalization = pascal_case


#### JetBrains specific rules ####
# https://www.jetbrains.com/help/rider/EditorConfig_Index.html
resharper_arrange_redundant_parentheses_highlighting = none
resharper_for_can_be_converted_to_foreach_highlighting = none
resharper_introduce_optional_parameters_global_highlighting = none
resharper_introduce_optional_parameters_local_highlighting = hint
resharper_loop_can_be_converted_to_query_highlighting = none
resharper_redundant_parentheses_highlighting = none
resharper_unused_auto_property_accessor_global_highlighting = none
